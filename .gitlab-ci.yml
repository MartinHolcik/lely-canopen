variables:
  GIT_STRATEGY: clone
  REGISTRY: $CI_REGISTRY_IMAGE
  CPPFLAGS: -DCO_DEFTYPE_TIME_SCET=0x0060 -DCO_DEFTYPE_TIME_SUTC=0x0061

cache:
  key: none
  paths: []
  policy: pull

stages:
  - docker1
  - docker2
  - build
  - test
  - deploy

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

.docker:
  tags:
    - docker
    - linux
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build
        --build-arg REGISTRY=$REGISTRY
        -t $CI_REGISTRY_IMAGE/$NAME:$TAG docker/$NAME/$TAG
    - docker push $CI_REGISTRY_IMAGE/$NAME:$TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - docker/**/*
        - .gitlab-ci.yml
      when: always

.docker1:
  extends: .docker
  stage: docker1

.docker2:
  extends: .docker
  stage: docker2

.build:
  stage: build
  tags:
    - docker
    - linux
  needs: []
  script:
    - autoreconf -i
    - ./configure $CONFIGURE_OPTIONS
    - make
  artifacts:
    untracked: true
    expire_in: 1 week

.test:
  stage: test
  tags:
    - docker
    - linux
  script:
    - touch aclocal.m4 configure config.status Makefile.in
    - make -t
    - make check
  artifacts:
    when: always
    paths:
      - test/test-*.log
      - unit-tests/*/test-*.log
      - unit-tests/*/unit-test-*.log
    reports:
      junit: unit-tests/*/cpputest_*.xml
    expire_in: 1 week

.docker-gcc:
  extends: .docker1
  script:
    - docker build
        --build-arg __GNUC__=$__GNUC__
        -t $CI_REGISTRY_IMAGE/gcc:$__GNUC__ docker/gcc
    - docker push $CI_REGISTRY_IMAGE/gcc:$__GNUC__

docker-gcc:
  extends: .docker-gcc
  parallel:
    matrix:
      - __GNUC__: [4, 5, 6, 7, 8, 9, 10, 11]

build:gcc:
  extends: .build
  image: $REGISTRY/gcc:$__GNUC__
  parallel:
    matrix:
      - __GNUC__: [4, 5, 6, 7, 8, 9, 10, 11]
  variables:
    CONFIGURE_OPTIONS: --disable-python2

test:gcc:4:
  extends: .test
  image: $REGISTRY/gcc:4
  needs: ["build:gcc: [4]"]

test:gcc:5:
  extends: .test
  image: $REGISTRY/gcc:5
  needs: ["build:gcc: [5]"]

test:gcc:6:
  extends: .test
  image: $REGISTRY/gcc:6
  needs: ["build:gcc: [6]"]

test:gcc:7:
  extends: .test
  image: $REGISTRY/gcc:7
  needs: ["build:gcc: [7]"]

test:gcc:8:
  extends: .test
  image: $REGISTRY/gcc:8
  needs: ["build:gcc: [8]"]

test:gcc:9:
  extends: .test
  image: $REGISTRY/gcc:9
  needs: ["build:gcc: [9]"]

test:gcc:10:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:gcc: [10]"]

test:gcc:11:
  extends: .test
  image: $REGISTRY/gcc:11
  needs: ["build:gcc: [11]"]

build:configure:
  extends: .build
  image: $REGISTRY/gcc:10
  parallel:
    matrix:
      - CONFIGURE_OPTIONS:
        - --disable-canfd
        - --disable-errno
        - --disable-hosted
        - --disable-malloc
        - --disable-master
        - --disable-stdio
        - --enable-ecss-redundancy --disable-tests
        - --enable-ecss-redundancy --disable-master --disable-tests
        - --enable-ecss-compliance
        - --enable-ecss-compliance --disable-master

test:configure:disable-canfd:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--disable-canfd]"]

test:configure:disable-errno:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--disable-errno]"]

test:configure:disable-hosted:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--disable-hosted]"]

test:configure:disable-malloc:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--disable-malloc]"]

test:configure:disable-master:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--disable-master]"]

test:configure:disable-stdio:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--disable-stdio]"]

test:configure:enable-ecss-redundancy:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--enable-ecss-redundancy --disable-tests]"]

test:configure:enable-ecss-redundancy-no-master:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--enable-ecss-redundancy --disable-master --disable-tests]"]

test:configure:enable-ecss-compliance:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--enable-ecss-compliance]"]

test:configure:enable-ecss-compliance-no-master:
  extends: .test
  image: $REGISTRY/gcc:10
  needs: ["build:configure: [--enable-ecss-compliance --disable-master]"]

docker:mingw-w64:
  extends: .docker1
  script:
    - docker build
        --build-arg ARCH=$ARCH
        -t $CI_REGISTRY_IMAGE/$ARCH-w64-mingw32:$TAG docker/mingw-w64/$TAG
    - docker push $CI_REGISTRY_IMAGE/$ARCH-w64-mingw32:$TAG
  variables:
    TAG: bullseye
  parallel:
    matrix:
      - ARCH: [i686, x86_64]

build:mingw-w64:
  extends: .build
  image: $REGISTRY/$HOST:bullseye
  variables:
    CONFIGURE_OPTIONS: --host=$HOST --disable-python --disable-tests # awaiting fix for tests
  parallel:
    matrix:
      - HOST: [i686-w64-mingw32, x86_64-w64-mingw32]

test:i686-w64-mingw32:
  extends: .test
  image: $REGISTRY/i686-w64-mingw32:bullseye
  needs: ["build:mingw-w64: [i686-w64-mingw32]"]

test:x86_64-w64-mingw32:
  extends: .test
  image: $REGISTRY/x86_64-w64-mingw32:bullseye
  needs: ["build:mingw-w64: [x86_64-w64-mingw32]"]

docker:crossbuild:
  extends: .docker1
  script:
    - docker build
        --build-arg ARCH=$ARCH
        --build-arg NAME=$NAME
        -t $CI_REGISTRY_IMAGE/$NAME:$TAG docker/crossbuild/$TAG
    - docker push $CI_REGISTRY_IMAGE/$NAME:$TAG
  parallel:
    matrix:
      - ARCH: armhf
        NAME: arm-linux-gnueabihf
        TAG: buster
      - ARCH: arm64
        NAME: aarch64-linux-gnu
        TAG: buster

build:crossbuild:
  extends: .build
  image: $REGISTRY/$HOST:buster
  variables:
    ARCH: armhf
    # TODO enable unit tests (switch to bullseye)
    CONFIGURE_OPTIONS: --host=$HOST --disable-unit-tests
  parallel:
    matrix:
      - HOST: [arm-linux-gnueabihf, aarch64-linux-gnu]

test:arm-linux-gnueabihf:
  extends: .test
  image: $REGISTRY/arm-linux-gnueabihf:buster
  needs: ["build:crossbuild: [arm-linux-gnueabihf]"]

test:aarch64-linux-gnu:
  extends: .test
  image: $REGISTRY/aarch64-linux-gnu:buster
  needs: ["build:crossbuild: [aarch64-linux-gnu]"]

docker:build:
  extends: .docker1
  variables:
    NAME: build
    TAG: bullseye

docker:arm-none-eabi:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: arm-none-eabi
    TAG: bullseye

build:arm-none-eabi:
  extends: .build
  image: $REGISTRY/arm-none-eabi:bullseye
  variables:
    CFLAGS: -g -O2 -mcpu=cortex-m3 -D__NEWLIB__
    CONFIGURE_OPTIONS: --host=arm-none-eabi --disable-tools --disable-tests --disable-unit-tests --disable-python --disable-threads --disable-daemon
    CXXFLAGS: -g -O2 -mcpu=cortex-m3 -D__NEWLIB__
    LDFLAGS: --specs=nosys.specs

docker:doc:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: doc
    TAG: bullseye

doc:
  stage: build
  tags:
    - docker
    - linux
  image: $REGISTRY/doc:bullseye
  needs: []
  script:
    - autoreconf -i
    - ./configure
    - make html
  artifacts:
    when: always
    paths:
      - doc/
    expire_in: 1 week

docker:cpplint:
  extends: .docker1
  variables:
    NAME: cpplint
    TAG: bullseye

cpplint:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/cpplint:bullseye
  needs: []
  script:
    - python2 $(which cpplint.py)
        --quiet
        --extensions=cpp
        $(find include -name *.hpp)
        $(find lib -name *.cpp)
        $(find unit-tests -name *.cpp -o -name *.hpp)

docker:clang-format:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: clang-format
    TAG: bullseye

clang-format:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/clang-format:bullseye
  needs: []
  script:
    - ln -sf .clang-format.c .clang-format
    - clang-format
        -n
        --Werror
        $(find include -name *.h)
        $(find lib -name *.c -o -name *.h)
        $(find tools -name *.c -o -name *.h)
        $(find test -name *.c -o -name *.h)
        $(find unit-tests -name *.cpp -o -name *.hpp)
    - ln -sf .clang-format.cpp .clang-format
    - clang-format
        -n
        --Werror
        $(find include -name *.hpp)
        $(find lib -name *.cpp -o -name *.hpp)
        $(find test -name *.cpp -o -name *.hpp)

docker:valgrind:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: valgrind
    TAG: bullseye

valgrind:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/valgrind:bullseye
  needs: []
  script:
    - autoreconf -i
    - ./configure --disable-cython
    - make
    - make check-valgrind-memcheck
  artifacts:
    when: always
    paths:
      - test/test-*.log
      - unit-tests/*/test-*.log
      - unit-tests/*/unit-test-*.log
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"'
      when: always
    - when: manual
      allow_failure: true

valgrind:redundancy:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/valgrind:bullseye
  needs: []
  script:
    - autoreconf -i
    - ./configure --disable-cython --enable-ecss-redundancy --disable-tests
    - make
    - make check-valgrind-memcheck
  artifacts:
    when: always
    paths:
      - test/test-*.log
      - unit-tests/*/test-*.log
      - unit-tests/*/unit-test-*.log
    expire_in: 1 week

valgrind:ecss:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/valgrind:bullseye
  needs: []
  script:
    - autoreconf -i
    - ./configure --enable-ecss-compliance
    - make
    - make check-valgrind-memcheck
  artifacts:
    when: always
    paths:
      - test/test-*.log
      - unit-tests/*/test-*.log
      - unit-tests/*/unit-test-*.log
    expire_in: 1 week

docker:asan:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: asan
    TAG: bullseye

asan:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/asan:bullseye
  needs: []
  variables:
    CFLAGS: "-O0 -g -fsanitize=address"
    CXXFLAGS: "-O0 -g -fsanitize=address"
  script:
    - autoreconf -i
    - ./configure --disable-python --disable-shared
    - make
    - make check
  artifacts:
    when: always
    paths:
      - test/test-*.log
      - unit-tests/*/test-*.log
      - unit-tests/*/unit-test-*.log
    expire_in: 1 week

asan:redundancy:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/asan:bullseye
  needs: []
  variables:
    CFLAGS: "-O0 -g -fsanitize=address"
    CXXFLAGS: "-O0 -g -fsanitize=address"
  script:
    - autoreconf -i
    - ./configure --disable-python --disable-shared --enable-ecss-redundancy --disable-tests
    - make
    - make check
  artifacts:
    when: always
    paths:
      - test/test-*.log
      - unit-tests/*/test-*.log
      - unit-tests/*/unit-test-*.log
    expire_in: 1 week

asan:ecss:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/asan:bullseye
  needs: []
  variables:
    CFLAGS: "-O0 -g -fsanitize=address"
    CXXFLAGS: "-O0 -g -fsanitize=address"
  script:
    - autoreconf -i
    - ./configure --disable-python --disable-shared --enable-ecss-compliance
    - make
    - make check
  artifacts:
    when: always
    paths:
      - test/test-*.log
      - unit-tests/*/test-*.log
      - unit-tests/*/unit-test-*.log
    expire_in: 1 week

docker:lcov:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: lcov
    TAG: bullseye

lcov:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/lcov:bullseye
  needs: []
  variables:
    # force empty so --enable-code-coverage will setup them correctly
    CFLAGS: ""
    CXXFLAGS: ""
  script:
    - autoreconf -i
    - ./configure --enable-code-coverage --disable-shared $LELY_CORE_ANALYSIS_CONFIGURE_OPTIONS
    - make
    - make check-code-coverage
    - lcov --summary coverage.info --rc lcov_branch_coverage=1
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week

docker:scan-build:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: scan-build
    TAG: bullseye

scan-build:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/scan-build:bullseye
  needs: []
  variables:
    CFLAGS: "-O0 -g"
    CXXFLAGS: "-O0 -g"
  script:
    - autoreconf -i
    - scan-build ./configure --disable-cython $LELY_CORE_ANALYSIS_CONFIGURE_OPTIONS
    - scan-build --status-bugs --keep-cc -o ./scan-build make check
  artifacts:
    when: always
    paths:
      - scan-build/
    expire_in: 1 week

docker:cppcheck-unix64:
  extends: .docker2
  needs: ["docker:build"]
  variables:
    NAME: cppcheck-unix64
    TAG: bullseye

cppcheck-unix64:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/cppcheck-unix64:bullseye
  needs: []
  script:
    - autoreconf -i
    - ./configure --disable-python
    - cppcheck --doc > cppcheck-rules.md
    - cppcheck
        -D_GNU_SOURCE -D__linux__=1 -DHAVE_CONFIG_H
        --enable=warning,style,performance,portability,missingInclude
        --error-exitcode=1
        --force
        --quiet
        -I. -I./include
        --inline-suppr
        --platform=unix64
        --std=c11 --std=c++11
        --library=std --library=gnu
        --suppressions-list=suppressions.txt
        -ilib/io2/win32
        include lib unit-tests
  artifacts:
    paths:
      - cppcheck-rules.md
    expire_in: 1 week

docker:cppcheck-win64:
  extends: .docker2
  needs: ["docker:mingw-w64: [x86_64]"]
  variables:
    NAME: cppcheck-win64
    TAG: bullseye

cppcheck-win64:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/cppcheck-win64:bullseye
  needs: []
  script:
    - autoreconf -i
    - ./configure --host=x86_64-w64-mingw32 --disable-python
    - cppcheck --doc > cppcheck-rules.md
    - cppcheck
        -D_WIN32=1 -D_WIN64=1 -D__MINGW32__=1 -D__MINGW64__=1 -DHAVE_CONFIG_H
        -U__linux__
        --enable=warning,style,performance,portability,missingInclude
        --error-exitcode=1
        --force
        --quiet
        -I. -I./include
        --inline-suppr
        --platform=win64
        --std=c11 --std=c++11
        --library=std --library=gnu --library=windows
        --suppress=va_list_usedBeforeStarted
        --suppressions-list=suppressions.txt
        -ilib/io2/linux
        include lib unit-tests
  artifacts:
    paths:
      - cppcheck-rules.md
    expire_in: 1 week

docker:python-checks:
  extends: .docker1
  variables:
    NAME: python-checks
    TAG: 3.8-slim

python-checks:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/python-checks:3.8-slim
  needs: []
  script:
    - black --diff --check python/dcf-tools/
    - flake8 python/dcf-tools

docker:coverity:
  extends: .docker2
  needs: ["docker-gcc: [9]"]
  script:
    - docker build
        --build-arg REGISTRY=$REGISTRY
        --build-arg COVERITY_PROJECT=$COVERITY_PROJECT
        --build-arg COVERITY_TOKEN=$COVERITY_TOKEN
        -t $CI_REGISTRY_IMAGE/coverity:gcc9 docker/coverity/gcc9
    - docker push $CI_REGISTRY_IMAGE/coverity:gcc9

coverity:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/coverity:gcc9
  needs: []
  script:
    - autoreconf -i
    - ./configure --disable-cython $LELY_CORE_ANALYSIS_CONFIGURE_OPTIONS
    - cov-build --dir cov-int make check
  after_script:
    - tar caf $CI_PROJECT_NAME.xz cov-int
    - curl --form token=$COVERITY_TOKEN
        --form email=$COVERITY_EMAIL
        --form file=@$CI_PROJECT_NAME.xz
        --form version="$(git describe --abbrev=0 --tags | sed s/^v//)"
        --form description="$CI_COMMIT_REF_NAME"
        https://scan.coverity.com/builds?project=$COVERITY_PROJECT
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - when: manual
      allow_failure: true

docker:sonarcloud:
  extends: .docker2
  needs: ["docker:build"]
  script:
    - docker build
        --build-arg REGISTRY=$REGISTRY
        --build-arg SONAR_HOST_URL=$SONAR_HOST_URL
        --build-arg SONAR_TOKEN=SONAR_TOKEN
        -t $CI_REGISTRY_IMAGE/sonarcloud:bullseye docker/sonarcloud/bullseye
    - docker push $CI_REGISTRY_IMAGE/sonarcloud:bullseye

sonarcloud:
  stage: test
  tags:
    - docker
    - linux
  image: $REGISTRY/sonarcloud:bullseye
  needs: []
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  script:
    - autoreconf -i
    - ./configure --disable-cython $LELY_CORE_ANALYSIS_CONFIGURE_OPTIONS
    - /opt/sonar-build-wrapper/build-wrapper-linux-x86-64 --out-dir bw-output make check
    - /opt/sonar-scanner/bin/sonar-scanner
           -Dsonar.host.url="${SONAR_HOST_URL}"
           -Dsonar.token="${SONAR_TOKEN}"
           -Dsonar.projectKey="${SONAR_PROJECT_KEY}"
           -Dsonar.organization="${SONAR_ORGANIZATION}"
           -Dsonar.projectName="Lely CANopen"
           -Dsonar.links.homepage="${CI_PROJECT_URL}"
           -Dsonar.links.ci="${CI_PROJECT_URL}/pipelines"
           -Dsonar.links.scm="${CI_PROJECT_URL}"
           -Dsonar.links.issue="${CI_PROJECT_URL}/issues"
           -Dsonar.sources=.
           -Dsonar.cfamily.build-wrapper-output=bw-output
           -Dsonar.cfamily.threads=1
           -Dsonar.cfamily.cache.enabled=false
           -Dsonar.python.version=3
  rules:
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      when: always
    - when: never

pages:
  stage: deploy
  tags:
    - docker
    - linux
  image: alpine:latest
  needs: ["doc", "lcov"]
  script:
    - mkdir -p public
    - mv coverage public/lcov
    - mv doc/html public/doxygen
  artifacts:
    paths:
      - public
    expire_in: 1 weeks
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - when: never
