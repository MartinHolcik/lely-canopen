variables:
  GIT_STRATEGY: clone

cache:
  key: none
  paths: []
  policy: pull

.gcc-deps: &gcc-deps
  tags:
    - docker
    - linux
  before_script:
    - apt-get update -q || true
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev
    - apt-get install -qy --no-install-recommends
        cython
        libpython-dev
        python
        python-setuptools
        python-wheel
    - apt-get install -qy --no-install-recommends
        cython3
        libpython3-dev
        python3
        python3-setuptools
        python3-wheel

.build: &build
  stage: build
  script:
    - autoreconf -i
    - ./configure $CONFIGURE_OPTIONS
    - make
  artifacts:
    untracked: true

.test: &test
  stage: test
  script:
    - touch aclocal.m4 configure config.status Makefile.in
    - make -t
    - make check

build:gcc:4:
  image: gcc:4
  <<: *gcc-deps
  <<: *build

test:gcc:4:
  image: gcc:4
  dependencies:
    - build:gcc:4
  <<: *gcc-deps
  <<: *test

build:gcc:5:
  image: gcc:5
  <<: *gcc-deps
  <<: *build

test:gcc:5:
  image: gcc:5
  dependencies:
    - build:gcc:5
  <<: *gcc-deps
  <<: *test

build:gcc:6:
  image: gcc:6
  <<: *gcc-deps
  <<: *build

test:gcc:6:
  image: gcc:6
  dependencies:
    - build:gcc:6
  <<: *gcc-deps
  <<: *test

build:gcc:7:
  image: gcc:7
  <<: *gcc-deps
  <<: *build

test:gcc:7:
  image: gcc:7
  dependencies:
    - build:gcc:7
  <<: *gcc-deps
  <<: *test

build:gcc:8:
  image: gcc:8
  <<: *gcc-deps
  <<: *build

test:gcc:8:
  image: gcc:8
  dependencies:
    - build:gcc:8
  <<: *gcc-deps
  <<: *test

build:gcc:9:
  image: gcc:9
  <<: *gcc-deps
  <<: *build

test:gcc:9:
  image: gcc:9
  dependencies:
    - build:gcc:9
  <<: *gcc-deps
  <<: *test

.mingw-deps: &mingw-deps
  tags:
    - docker
    - linux
  image: debian:buster
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        apt-transport-https
        build-essential
        curl
        gnupg
        software-properties-common
    - apt-get install -qy --no-install-recommends
        mingw-w64
    - curl -L https://dl.winehq.org/wine-builds/winehq.key | apt-key add -
    - apt-add-repository 'deb https://dl.winehq.org/wine-builds/debian/ buster main'
    - curl -L https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_10/Release.key | apt-key add -
    - apt-add-repository 'deb https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_10/ ./'
    - dpkg --add-architecture i386
    - apt-get update -q
    - apt-get install -qy
        winehq-stable
    - wineboot -i
    - apt-get install -qy --no-install-recommends
        automake
        libtool

build:i686-w64-mingw32:
  <<: *mingw-deps
  <<: *build
  variables:
    CONFIGURE_OPTIONS: --host=i686-w64-mingw32 --disable-python
    WINEPATH: Z:\\usr\\lib\\gcc\\i686-w64-mingw32\\8.3-posix\;Z:\\usr\\i686-w64-mingw32\\lib

test:i686-w64-mingw32:
  dependencies:
    - build:i686-w64-mingw32
  <<: *mingw-deps
  <<: *test
  variables:
    WINEPATH: Z:\\usr\\lib\\gcc\\i686-w64-mingw32\\8.3-posix\;Z:\\usr\\i686-w64-mingw32\\lib

build:x86_64-w64-mingw32:
  <<: *mingw-deps
  <<: *build
  variables:
    CONFIGURE_OPTIONS: --host=x86_64-w64-mingw32 --disable-python
    WINEPATH: Z:\\usr\\lib\\gcc\\x86_64-w64-mingw32\\8.3-posix\;Z:\\usr\\x86_64-w64-mingw32\\lib

test:x86_64-w64-mingw32:
  dependencies:
    - build:x86_64-w64-mingw32
  <<: *mingw-deps
  <<: *test
  variables:
    WINEPATH: Z:\\usr\\lib\\gcc\\x86_64-w64-mingw32\\8.3-posix\;Z:\\usr\\x86_64-w64-mingw32\\lib

.cross-deps: &cross-deps
  tags:
    - docker
    - linux
  image: debian:sid
  before_script:
    - dpkg --add-architecture $ARCH
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        crossbuild-essential-$ARCH
        libstdc++-9-dev:$ARCH
        qemu-user-static
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev:$ARCH

build:arm-linux-gnueabihf:
  <<: *cross-deps
  <<: *build
  variables:
    ARCH: armhf
    CONFIGURE_OPTIONS: --host=arm-linux-gnueabihf --disable-python
  allow_failure: true

test:arm-linux-gnueabihf:
  dependencies:
    - build:arm-linux-gnueabihf
  <<: *cross-deps
  <<: *test
  variables:
    ARCH: armhf
  allow_failure: true

build:aarch64-linux-gnu:
  <<: *cross-deps
  <<: *build
  variables:
    ARCH: arm64
    CONFIGURE_OPTIONS: --host=aarch64-linux-gnu --disable-python
  allow_failure: true

test:aarch64-linux-gnu:
  dependencies:
    - build:aarch64-linux-gnu
  <<: *cross-deps
  <<: *test
  variables:
    ARCH: arm64
  allow_failure: true

build:arm-none-eabi:
  <<: *build
  tags:
    - docker
    - linux
  image: debian:sid
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
        gcc-arm-none-eabi
        libstdc++-arm-none-eabi-newlib
    - apt-get install -qy --no-install-recommends
        automake
        libtool
  variables:
    CFLAGS: -g -O2 -mcpu=cortex-m3 -D__NEWLIB__
    CONFIGURE_OPTIONS: --host=arm-none-eabi --disable-tools --disable-tests --disable-python --disable-threads --disable-daemon
    CXXFLAGS: -g -O2 -mcpu=cortex-m3 -D__NEWLIB__
    LDFLAGS: --specs=nosys.specs

doc:
  stage: build
  tags:
    - docker
    - linux
  image: debian:sid
  dependencies: []
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev
    - apt-get install -qy --no-install-recommends
        doxygen
        graphviz
  script:
    - autoreconf -i
    - ./configure
    - make html
  artifacts:
    paths:
      - doc/
    expire_in: 1 week

cpplint:
  stage: test
  tags:
    - docker
    - linux
  image: debian:sid
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        ca-certificates
        git
        python
    - git clone https://github.com/google/styleguide.git
  script:
    - styleguide/cpplint/cpplint.py
        --quiet
        --extensions=cpp
        $(find include -name *.hpp)
        $(find src -name *.cpp)

valgrind:
  stage: test
  tags:
    - docker
    - linux
  image: debian:sid
  dependencies: []
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
        valgrind
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev
  script:
    - autoreconf -i
    - ./configure --disable-python
    - make
    - make check-valgrind-memcheck
  artifacts:
    paths:
      - test/test-*.log
    expire_in: 1 week

lcov:
  stage: test
  tags:
    - docker
    - linux
  image: debian:sid
  dependencies: []
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev
    - apt-get install -qy --no-install-recommends
        doxygen
        graphviz
        lcov
  script:
    - autoreconf -i
    - ./configure --enable-code-coverage --disable-shared
    - make
    - make check-code-coverage
    - lcov --summary coverage.info --rc lcov_branch_coverage=1
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week

scan-build:
  stage: test
  tags:
    - docker
    - linux
  image: debian:sid
  dependencies: []
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
        clang-tools
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev
  script:
    - autoreconf -i
    - scan-build ./configure --disable-python
    - scan-build --keep-cc -o ./scan-build make check
  artifacts:
    paths:
      - scan-build/
    expire_in: 1 week

cppcheck:linux:
  stage: test
  tags:
    - docker
    - linux
  image: debian:sid
  dependencies: []
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
        cppcheck
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev
  script:
    - autoreconf -i
    - ./configure --disable-python
    - cppcheck
        -D_GNU_SOURCE -D__linux__=1 -DHAVE_CONFIG_H
        --enable=warning,style,performance,portability
        --error-exitcode=1
        --force
        -I/usr/include -I. -I./include
        --inline-suppr
        --platform=unix64
        --quiet
        --std=c11 --std=c++11
        --suppressions-list=suppressions.txt
        include src

cppcheck:mingw32:
  stage: test
  tags:
    - docker
    - linux
  image: debian:sid
  dependencies: []
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
        cppcheck
        mingw-w64
    - apt-get install -qy --no-install-recommends
        automake
        libtool
  script:
    - autoreconf -i
    - ./configure --host=x86_64-w64-mingw32 --disable-python
    - cppcheck
        -D_WIN32=1 -D_WIN64=1 -D__MINGW32__=1 -DHAVE_CONFIG_H
        --enable=warning,style,performance,portability
        --error-exitcode=1
        --force
        -I/usr/x86_64-w64-mingw32/include -I. -I./include
        --inline-suppr
        --platform=win64
        --quiet
        --std=c11 --std=c++11
        --suppress=va_list_usedBeforeStarted
        --suppressions-list=suppressions.txt
        include src
  when: manual

coverity:
  stage: test
  tags:
    - docker
    - linux
  image: debian:sid
  dependencies: []
  before_script:
    - apt-get update -q
    - apt-get install -qy --no-install-recommends
        build-essential
        ca-certificates
        curl
        git
        wget
    - apt-get install -qy --no-install-recommends
        automake
        libtool
    - apt-get install -qy --no-install-recommends
        libbluetooth-dev
    - wget https://scan.coverity.com/download/linux64
        --post-data "token=$COVERITY_TOKEN&project=$COVERITY_PROJECT"
        -O coverity_tool.tgz
    - wget https://scan.coverity.com/download/linux64
        --post-data "token=$COVERITY_TOKEN&project=$COVERITY_PROJECT&md5=1"
        -O coverity_tool.md5
    - echo " coverity_tool.tgz" >> coverity_tool.md5
    - md5sum -c coverity_tool.md5
    - mkdir coverity_tool
    - tar xf coverity_tool.tgz -C coverity_tool --strip-components 1
  script:
    - autoreconf -i
    - ./configure --disable-python
    - coverity_tool/bin/cov-build --dir cov-int make check
  after_script:
    - tar caf $CI_PROJECT_NAME.xz cov-int
    - curl --form token=$COVERITY_TOKEN
        --form email=$COVERITY_EMAIL
        --form file=@$CI_PROJECT_NAME.xz
        --form version="$(git describe --abbrev=0 --tags | sed s/^v//)"
        --form description="$CI_COMMIT_REF_NAME"
        https://scan.coverity.com/builds?project=$COVERITY_PROJECT
  when: manual

pages:
  stage: deploy
  only:
    - master
  tags:
    - docker
    - linux
  image: alpine:latest
  dependencies:
    - doc
    - lcov
  script:
    - mkdir -p public
    - mv coverage public/lcov
    - mv doc/html public/doxygen
  artifacts:
    paths:
      - public
    expire_in: 1 weeks
